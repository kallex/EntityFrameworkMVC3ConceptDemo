<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".designer.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="ObjectRelational_v1_0.ttinclude" #>
<#   
	string templateDirectoryName = Path.GetDirectoryName(Host.TemplateFile);
	string directoryName = templateDirectoryName + @"\Content_v1_0";
	string[] xmlFileNames = Directory.GetFiles(directoryName, "*.xml");

	#>
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;
using System.Linq;
using System.Xml.Serialization;


	<#
	
	foreach(string xmlFileName in xmlFileNames)
	{
		ObjectRelationalAbstraction abs = LoadXml<ObjectRelationalAbstraction>(xmlFileName);
		foreach(var entities in abs.Entities)
		{
			foreach(GeneratorOutputType generatorOutput in entities.GeneratorMeta)
			{
				if(generatorOutput.role != GeneratorOutputTypeRole.BusinessLogic)
					continue;
				CurrOutputType = generatorOutput;
				GenerateEntities(entities);
			}
		}
		/*
		Operation_v1_0.OperationAbstractionType abstraction = LoadXml<Operation_v1_0.OperationAbstractionType>(xmlFileName);
		Operation_v1_0.OperationsType operations = abstraction.Operations;
		BeginNamespace(operations.codeNamespace);
		foreach(var operation in operations.Operation)
			GenerateOperation(operation);
		EndBlock();
		*/
		//PowerPointAddIn_v1_0.PowerPointAddInAbstraction abstraction = LoadXml<PowerPointAddIn_v1_0.PowerPointAddInAbstraction>(xmlFileName);
		//GenerateAddInBase(abstraction);
	}
#>
<#+ 
	#region Class helpers
	
	public enum Multiplicity
	{
		Item0_1,
		Item1,
		Item0_n,
		Item1_n
	}
	
	class AssocEnd
	{
		public string ClassName { get; set; }
		public string PropertyName { get; set; }
		public Multiplicity EndMultiplicity { get; set; }
		public bool IsParent { get; set; }
		
		public bool IsOptional {
			get {
				return EndMultiplicity == Multiplicity.Item0_1 ||
					EndMultiplicity == Multiplicity.Item0_n;
			}
		}
		
		public bool IsMany {
			get {
				return EndMultiplicity == Multiplicity.Item0_n ||
					EndMultiplicity == Multiplicity.Item1_n;
			}
		}
	}
	
	class AssociationItem
	{
		public AssocEnd End1 { get; set; }
		public AssocEnd End2 { get; set; }
		
		public bool AreBothParents {
			get { return End1.IsParent && End2.IsParent; }
		}
		
		public AssocEnd ParentEnd {
			get {
				if(AreBothParents)
					throw new NotSupportedException("Not single ParentEnd, because both are parents");
				if(End1.IsParent)
					return End1;
				if(End2.IsParent)
					return End2;
				throw new NotSupportedException("One parent in AssociationItem is required");
			}
		}
		
		public AssocEnd ChildEnd {
			get {
				if(End1.IsParent == false)
					return End1;
				if(End2.IsParent == false)
					return End2;
				return null;
			}
		}
	}
	
	class ChildRelationItem
	{
		public EntityType Parent;
		public ChildEntityType Child;
		
		public static ChildRelationItem[] GetRelationItems(EntityType[] entities)
		{
			return entities.Where(ent => ent.ChildEntity != null)
				.SelectMany(ent => 
			{ 
				return ent.ChildEntity.Select(cent => 
					new ChildRelationItem { Parent = ent, Child = cent });
			}).ToArray();
		}
		
		public AssociationItem GetAssociationItem()
		{
			return GetAssociationItem(this);
		}
		
		public static AssociationItem GetAssociationItem(ChildRelationItem crItem)
		{
			AssociationItem assocItem = new AssociationItem
			{
				End1 = new AssocEnd {
					ClassName = crItem.Parent.name,
					PropertyName = crItem.Child.name,
					EndMultiplicity = Multiplicity.Item1,
					IsParent = true,
				},
				End2 = new AssocEnd {
					ClassName = crItem.Child.Entity.name,
					PropertyName = "Parent" + crItem.Parent.name,
					EndMultiplicity = (Multiplicity) Enum.Parse(typeof(Multiplicity), crItem.Child.multiplicity.ToString()),
					IsParent = false,
				}
			};
			return assocItem;
		}
	}
	
	#endregion
	
	#region Class Level Variable Block
	
	GeneratorOutputType CurrOutputType;
	string CurrDomainName;
	
	void GenerateEntities(EntitiesType entities)
	{
		BeginNamespace(CurrOutputType.namespaceName);
		CurrDomainName = entities.DomainName;
		GenerateDataContext(entities);
		foreach(var entity in entities.Entity)
		{
			GenerateEntity(entity);
		}
		EndBlock();
	}
	
	string GetDataContextName(string domainName)
	{
		string contextName = domainName + "Ctx";
		return contextName;
	}
	
	void GenerateDataContext(EntitiesType entities)
	{
		string domainName = entities.DomainName;
		string dbName = domainName + "DB";
		string initializerName = dbName + "Initializer";
		string contextName = GetDataContextName(domainName);
		EntityType[] allEntities = GetAllEntities(entities.Entity);
		ChildRelationItem[] allRelations = ChildRelationItem.GetRelationItems(allEntities);
		#>
	    public class <#= initializerName #> : DropCreateDatabaseIfModelChanges< <#= contextName #> >
	    {
	        protected override void Seed(<#= contextName #> context)
	        {
	            base.Seed(context);
	        }
	    }

	    public class <#= contextName #> : DbContext
	    {
		
			public <#= contextName #>() : base() 
		    { 
			    this.Configuration.LazyLoadingEnabled = true;
		    } 
		
	        public static void InitializeDB()
	        {
	            Database.SetInitializer(new <#= initializerName #>());
	            var ctx = new <#= contextName #>();
	            ctx.Database.Initialize(false);
	        }
			
			<#+ 
			GenerateFluentAPIMapping(allRelations);
			foreach(EntityType entity in GetAllEntities(entities.Entity))
			{
				#>
			public DbSet< <#= entity.name #> > <#= entity.name #> { get; set; }
				<#+
			}
			#>
	    }
		
		<#+
	}
	
	void GenerateFluentAPIMapping(ChildRelationItem[] relations)
	{
		AssociationItem[] assocItems = relations.Select(relItem => relItem.GetAssociationItem()).ToArray();
		#>
            protected override void OnModelCreating(DbModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);
				<#+
				foreach(var assocItem in assocItems)
					GenerateModelCreatingAssociation(assocItem);
				#>
            }
		
		<#+
	}
	
	void GenerateModelCreatingAssociation(AssociationItem assocItem)
	{
		if(assocItem.AreBothParents)
			throw new NotSupportedException("Both end parents are currently not supported");
		AssocEnd parent = assocItem.ParentEnd;
		AssocEnd child = assocItem.ChildEnd;
		//string apiMethodString = child.IsMany ? "HasMany" : (child.IsOptional ? "HasOptional" : "HasRequired");
		string childMethodString = parent.IsOptional ? "HasOptional" : "HasRequired";
		#>
            modelBuilder.Entity< <#= child.ClassName #> >().<#= childMethodString #>(child => child.<#= child.PropertyName #>);
		<#+
		if(child.IsOptional == false && child.IsMany == false) {	
		#>
			modelBuilder.Entity< <#= parent.ClassName #> >().HasRequired(parent => parent.<#= parent.PropertyName #>)
				.WithRequiredPrincipal(child => child.<#= child.PropertyName #>);
		<#+
		}
	}
	
	EntityType[] GetAllEntities(EntityType[] entities)
	{
		return entities.SelectMany(entity => GetEntityWithChildren(entity)).ToArray();
	}
	
	EntityType[] GetEntityWithChildren(EntityType entity)
	{
		if(entity == null)
			throw new ArgumentNullException("entity");
		List<EntityType> result = new List<EntityType>();
		result.Add(entity);
		if(entity.ChildEntity != null)
			result.AddRange(entity.ChildEntity.SelectMany(childEntity => GetEntityWithChildren(childEntity.Entity)));
		return result.ToArray();
	}
	
	void GenerateEntityBasicFields(EntityType entity)
	{
		#>
	        [Key]
	        public Guid Id { get; set; }
			
			[ConcurrencyCheckAttribute]
 			public Guid Version { get; set; }
		<#+
	}
	
	void GenerateEntityBasicMethods(EntityType entity)
	{
		string entityName = entity.name;
		string contextTypeName = GetDataContextName(CurrDomainName);
		#>
        public static <#= entityName #> GetOrCreate(<#= contextTypeName #> ctx, Guid id)
        {
            <#= entityName #> result = ctx.<#= entityName #>.SingleOrDefault(item => item.Id == id);
            if(result == null)
            {
                result = new <#= entityName #>();
                result.Id = id;
                ctx.<#= entityName #>.Add(result);
            }
            return result;
        }
		
        public void Delete(<#= contextTypeName #> ctx)
        {
            ctx.<#= entityName #>.Remove(this);
        }
		<#+
	}
	
	void GenerateEntity(EntityType entity)
	{
		string entityName = entity.name;
		#>
		public partial class <#= entityName #>
		{
		<#+
		GenerateEntityBasicMethods(entity);
		GenerateEntityBasicFields(entity);
		
		foreach(var property in entity.Property ?? new VariableType[0])
			GenerateProperty(property);
		//foreach(var propertyChangeValidation in entity.PropertyChangeValidations ?? new ValidationType[0])
		//	GeneratePropertyChangeValidation(propertyChangeValidation);

		//foreach(var propertyChangeValidation in entity.PropertyChangeValidations ?? new ValidationType[0])
		//	GeneratePropertyChangeValidation(propertyChangeValidation);
		#>
		}
		
		<#+
		foreach(var childEntity in entity.ChildEntity ?? new ChildEntityType[0])
			GenerateChildEntity(entity, childEntity);
	}
	
	void GenerateProperty(VariableType property)
	{
		string dataType = property.dataType;
		string name = property.name;
		if(property.mappingMode == VariableTypeMappingMode.Native) {
		#>
		public <#= dataType #> <#= name #> { get; set; }
		<#+

		} else if(property.mappingMode == VariableTypeMappingMode.XML) {
			string storageName = name + "Storage";
			string fieldName = "_" + name;
			string serializerName = fieldName + "Serializer";
		#>
                [Column("<#= name #>")]
                public string <#= storageName #> { get; internal set; }
                private XmlSerializer <#= serializerName #> = new XmlSerializer(typeof(<#= dataType #>));
                private <#= dataType #> <#= fieldName #>;
				[NotMapped]
                public <#= dataType #> <#= name #>
                {
                    get
                    {
                        if(<#= fieldName #> == null && <#= storageName #> != null)
                        {
                            StringReader stringReader = new StringReader(<#= storageName #>);
                            <#= fieldName #> = (<#= dataType #>) <#= serializerName #>.Deserialize(stringReader);
                        }
                        return <#= fieldName #>;
                    }
				    set
                    {
                        if(<#= fieldName #> != value)
                        {
                            <#= fieldName #> = value;
                            if (<#= fieldName #> == null)
                                <#= storageName #> = null;
                            else
                            {
                                StringWriter stringWriter = new StringWriter();
                                <#= serializerName #>.Serialize(stringWriter, <#= fieldName #>);
                                <#= storageName #> = stringWriter.GetStringBuilder().ToString();
                            }
                        }

                    }
                }
		<#+
		} else
			throw new NotImplementedException("Mapping mode: " + property.mappingMode.ToString());
	}
	
	void GenerateChildEntity(EntityType parentEntity, ChildEntityType childEntity)
	{
		GenerateEntity(childEntity.Entity);
		GenerateParentToChildNavigation(parentEntity, childEntity);
		GenerateChildToParentNavigation(parentEntity, childEntity);
	}

	void GenerateParentToChildNavigation(EntityType parentEntity, ChildEntityType childEntity)
	{
		string memberDataType = childEntity.multiplicity == ChildEntityTypeMultiplicity.Item0_n ||
			childEntity.multiplicity == ChildEntityTypeMultiplicity.Item1_n ? 
			"ICollection<" + childEntity.Entity.name + ">" : childEntity.name;
		string parentName = GetParentName(parentEntity.name);
		string childName = GetChildName(childEntity.name);
		string assocName = GetAssociationName(parentEntity.name, childEntity.Entity.name);
		#>
		partial class <#= parentEntity.name #>
		{
			//[Association("<#= assocName #>", "<#= childName #>", "<#= parentName #>")]
			//[RelatedTo(RelatedProperty="<#= parentName #>")]
			public virtual <#= memberDataType #> <#= childName #> { get; set; }
		}
		<#+
	}

	void GenerateChildToParentNavigation(EntityType parentEntity, ChildEntityType childEntity)
	{
		string parentName = GetParentName(parentEntity.name);
		string childName = GetChildName(childEntity.name);
		string assocName = GetAssociationName(parentEntity.name, childEntity.Entity.name);
		#>
		partial class <#= childEntity.Entity.name #>
		{
			//[Association("<#= assocName #>", "<#= parentName #>", "<#= childName #>", IsForeignKey = true)]
			//[RelatedTo(RelatedProperty="<#= childName #>")]
			public virtual <#= parentEntity.name #> <#= parentName #> { get; set; }
		}
		<#+
	}

	string GetAssociationName(string entityName, string entityMemberName)
	{
		return entityName + "_" + entityMemberName;
	}
	
	string GetParentName(string entityName)
	{
		return "Parent" + entityName;
	}
	
	string GetChildName(string entityMemberName)
	{
		return entityMemberName;
	}
	
	//CQRS_v1_0.DomainType CurrentDomain;
	

	#endregion
#>