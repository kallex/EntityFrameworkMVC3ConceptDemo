<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".designer.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="ObjectRelational_v1_0.ttinclude" #>
<#   
	string templateDirectoryName = Path.GetDirectoryName(Host.TemplateFile);
	string directoryName = templateDirectoryName + @"\Content_v1_0";
	string[] xmlFileNames = Directory.GetFiles(directoryName, "*.xml");

	#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;

	<#
	
	foreach(string xmlFileName in xmlFileNames)
	{
		ObjectRelationalAbstraction abs = LoadXml<ObjectRelationalAbstraction>(xmlFileName);
		foreach(var entities in abs.Entities)
		{
			var businessLogic = entities.GeneratorMeta.SingleOrDefault(
				meta => meta.role == GeneratorOutputTypeRole.BusinessLogic);
			var mvcModel = entities.GeneratorMeta.SingleOrDefault(
				meta => meta.role == GeneratorOutputTypeRole.MVCModelClasses);
			GenerateMapping(businessLogic, mvcModel, entities);
		}
		/*
		Operation_v1_0.OperationAbstractionType abstraction = LoadXml<Operation_v1_0.OperationAbstractionType>(xmlFileName);
		Operation_v1_0.OperationsType operations = abstraction.Operations;
		BeginNamespace(operations.codeNamespace);
		foreach(var operation in operations.Operation)
			GenerateOperation(operation);
		EndBlock();
		*/
		//PowerPointAddIn_v1_0.PowerPointAddInAbstraction abstraction = LoadXml<PowerPointAddIn_v1_0.PowerPointAddInAbstraction>(xmlFileName);
		//GenerateAddInBase(abstraction);
	}
#>
<#+ 
	#region Class helpers
	
	public enum Multiplicity
	{
		Item0_1,
		Item1,
		Item0_n,
		Item1_n
	}
	
	class AssocEnd
	{
		public string ClassName { get; set; }
		public string PropertyName { get; set; }
		public Multiplicity EndMultiplicity { get; set; }
		public bool IsParent { get; set; }
		
		public bool IsOptional {
			get {
				return EndMultiplicity == Multiplicity.Item0_1 ||
					EndMultiplicity == Multiplicity.Item0_n;
			}
		}
		
		public bool IsMany {
			get {
				return EndMultiplicity == Multiplicity.Item0_n ||
					EndMultiplicity == Multiplicity.Item1_n;
			}
		}
	}
	
	class AssociationItem
	{
		public AssocEnd End1 { get; set; }
		public AssocEnd End2 { get; set; }
		
		public bool AreBothParents {
			get { return End1.IsParent && End2.IsParent; }
		}
		
		public AssocEnd ParentEnd {
			get {
				if(AreBothParents)
					throw new NotSupportedException("Not single ParentEnd, because both are parents");
				if(End1.IsParent)
					return End1;
				if(End2.IsParent)
					return End2;
				throw new NotSupportedException("One parent in AssociationItem is required");
			}
		}
		
		public AssocEnd ChildEnd {
			get {
				if(End1.IsParent == false)
					return End1;
				if(End2.IsParent == false)
					return End2;
				return null;
			}
		}
	}
	
	class ChildRelationItem
	{
		public EntityType Parent;
		public ChildEntityType Child;
		
		public static ChildRelationItem[] GetRelationItems(EntityType[] entities)
		{
			return entities.Where(ent => ent.ChildEntity != null)
				.SelectMany(ent => 
			{ 
				return ent.ChildEntity.Select(cent => 
					new ChildRelationItem { Parent = ent, Child = cent });
			}).ToArray();
		}
		
		public AssociationItem GetAssociationItem()
		{
			return GetAssociationItem(this);
		}
		
		public static AssociationItem GetAssociationItem(ChildRelationItem crItem)
		{
			AssociationItem assocItem = new AssociationItem
			{
				End1 = new AssocEnd {
					ClassName = crItem.Parent.name,
					PropertyName = crItem.Child.name,
					EndMultiplicity = Multiplicity.Item1,
					IsParent = true,
				},
				End2 = new AssocEnd {
					ClassName = crItem.Child.Entity.name,
					PropertyName = "Parent" + crItem.Parent.name,
					EndMultiplicity = (Multiplicity) Enum.Parse(typeof(Multiplicity), crItem.Child.multiplicity.ToString()),
					IsParent = false,
				}
			};
			return assocItem;
		}
	}
	
	#endregion
	
	#region Class Level Variable Block
	
	void GenerateMapping(GeneratorOutputType businessLogic, GeneratorOutputType mvcModel, EntitiesType entities)
	{
		string mappingNamespace = mvcModel.namespaceName + ".MappingToBL";
		#>
		using BL=<#= businessLogic.namespaceName #>;
		using MVC=<#= mvcModel.namespaceName #>;
		<#+
		
		
		BeginNamespace(mappingNamespace);
		GenerateMappingClasses(entities);
		EndBlock();
	}
	
	GeneratorOutputType CurrOutputType;
	
	string GetDataContextName(string domainName)
	{
		string contextName = domainName + "Ctx";
		return contextName;
	}
	void GenerateMappingClasses(EntitiesType entities)
	{
		string contextName = GetDataContextName(entities.DomainName);
		#>
        public static partial class MapSupport
        {
            public static BL.<#= contextName #> ActiveCtx
            {
                get
                {
                    HttpContext httpContext = HttpContext.Current;
                    const string ctxName = "<#= contextName #>";
                    var currCtx = (BL.<#= contextName #>)httpContext.Items[ctxName];
                    if (currCtx == null)
                    {
                        currCtx = new BL.<#= contextName #>();
                        httpContext.Items.Add(ctxName, currCtx);
                    }
                    return currCtx;
                }
            }
        }
		<#+
		foreach(var entity in GetAllEntities(entities.Entity))
		{
			GenerateEntityMapper(entity);
		}
	}
	
	EntityType[] GetAllEntities(EntityType[] entities)
	{
		return entities.SelectMany(entity => GetEntityWithChildren(entity)).ToArray();
	}
	
	EntityType[] GetEntityWithChildren(EntityType entity)
	{
		if(entity == null)
			throw new ArgumentNullException("entity");
		List<EntityType> result = new List<EntityType>();
		result.Add(entity);
		if(entity.ChildEntity != null)
			result.AddRange(entity.ChildEntity.SelectMany(childEntity => GetEntityWithChildren(childEntity.Entity)));
		return result.ToArray();
	}
	
	void GenerateAssignment(string targetFieldName, string sourceFieldName)
	{
		#>
		target.<#= targetFieldName #> = source.<#= sourceFieldName #>;
		<#+
	}
	
	VariableType[] GetEntityProperties(EntityType entity)
	{
		List<VariableType> result = new List<VariableType>();
		result.AddRange(GetEntityStandardProperties());
		result.AddRange(entity.Property);
		return result.ToArray();
	}
	
	VariableType[] GetEntityStandardProperties()
	{
		List<VariableType> result = new List<VariableType>();
		result.Add(new VariableType() { name = "Id", dataType = "Guid" });
		result.Add(new VariableType() { name = "Version", dataType = "Guid" });
		return result.ToArray();
	}
	
	string GetMvcPropertyName(string entityName, string propertyName)
	{
		return entityName + propertyName;
	}
	
	string GetMapperName(string entityName)
	{
		return "Map" + entityName;
	}
	
	void GenerateEntityMapper(EntityType entity)
	{
		string entityName = entity.name;
		string mapperName = GetMapperName(entityName);
		string blEntityName = "BL." + entityName;
		string mvcEntityName = "MVC." + entityName;
		string blEntityList = "List<" + blEntityName + ">";
		string mvcEntityList = "List<" + mvcEntityName + ">";
		string blEntityIEnumerable = "IEnumerable<" + blEntityName + ">";
		string mvcEntityIEnumerable = "IEnumerable<" + mvcEntityName + ">";
		#>
		public static partial class <#= mapperName #>
		{
			public static <#= blEntityList #> MapMvcToBusinessList(<#= mvcEntityIEnumerable #>  sourceList)
			{
				if(sourceList == null)
					return null;
			    return sourceList.Select(source => MapMvcToBusiness(source)).Where(source => source != null).ToList();
			}

			public static <#= mvcEntityList #> MapBusinessToMvcList(<#= blEntityIEnumerable #> sourceList)
			{
				if(sourceList == null)
					return null;
			    return sourceList.Select(source => MapBusinessToMvc(source)).ToList();
			}
		
			public static <#= blEntityName #> MapMvcToBusiness(<#= mvcEntityName #> source)
			{
				if(source == null)
					return null;
				<#= blEntityName #> target = <#= blEntityName #>.GetOrCreate(MapSupport.ActiveCtx, source.<#= GetMvcPropertyName(entityName, "Id") #>);
                if(target.Version != Guid.Empty && target.Version != source.<#= GetMvcPropertyName(entityName, "Version") #>)
                {
                    throw new DataException("Concurrency check failed");
                }
                if(source.<#= GetMvcPropertyName(entityName, "IsDeleted") #>)
                {
                    target.Delete(MapSupport.ActiveCtx);
					return null;
                } else {
			<#+
				foreach(VariableType property in GetEntityProperties(entity))
				{
					string propertyName = property.name;
					string sourceFieldName = GetMvcPropertyName(entityName, propertyName);
					string targetFieldName = propertyName;
					if(property.name != "Id")
						GenerateAssignment(targetFieldName, sourceFieldName);
				}
				
				foreach(ChildEntityType childEntity in entity.ChildEntity ?? new ChildEntityType[0])
				{
					string propertyName = childEntity.name;
					bool isList = childEntity.multiplicity == ChildEntityTypeMultiplicity.Item0_n ||
						childEntity.multiplicity == ChildEntityTypeMultiplicity.Item1_n;
				    // target.Measurements = MapProjectMeasurement.MapMvcToBusinessList(source.Measurements);
					string childMapperName = GetMapperName(childEntity.Entity.name);
					string methodName = "MapMvcToBusiness" + (isList ? "List" : "");
#>
					target.<#= propertyName #> = <#= childMapperName #>.<#= methodName #>(source.<#= propertyName #>);
<#+
				}
				
			#>	
				}
				return target;
			}
			
			public static <#= mvcEntityName #> MapBusinessToMvc(<#= blEntityName #> source)
			{
				if(source == null)
					return null;
				<#= mvcEntityName #> target = new <#= mvcEntityName #>();
			<#+
				foreach(VariableType property in GetEntityProperties(entity))
				{
					string propertyName = property.name;
					string sourceFieldName = propertyName;
					string targetFieldName = GetMvcPropertyName(entityName, propertyName);
					GenerateAssignment(targetFieldName, sourceFieldName);
				}
				foreach(ChildEntityType childEntity in entity.ChildEntity ?? new ChildEntityType[0])
				{
					string propertyName = childEntity.name;
					bool isList = childEntity.multiplicity == ChildEntityTypeMultiplicity.Item0_n ||
						childEntity.multiplicity == ChildEntityTypeMultiplicity.Item1_n;
				    // target.Measurements = MapProjectMeasurement.MapMvcToBusinessList(source.Measurements);
					string childMapperName = GetMapperName(childEntity.Entity.name);
					string methodName = "MapBusinessToMvc" + (isList ? "List" : "");
#>
					target.<#= propertyName #> = <#= childMapperName #>.<#= methodName #>(source.<#= propertyName #>);
<#+

				}

		
			#>	

				return target;
			}
		<#+
		
		#>
		}
		
		<#+
	}
	
	string GetPrivateFieldName(string propertyName)
	{
		return "_" + propertyName.Substring(0, 1).ToLower() + propertyName.Substring(1);
	}
	
	void GenerateChildEntity(EntityType parentEntity, ChildEntityType childEntity)
	{
		//GenerateEntity(childEntity.Entity);
		//GenerateParentToChildNavigation(parentEntity, childEntity);
		//GenerateChildToParentNavigation(parentEntity, childEntity);
	}

	string GetParentName(string entityName)
	{
		return "Parent" + entityName;
	}
	
	string GetChildName(string entityMemberName)
	{
		return entityMemberName;
	}
	
	//CQRS_v1_0.DomainType CurrentDomain;
	

	#endregion
#>