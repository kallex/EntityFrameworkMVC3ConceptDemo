<#@ template debug="true" hostSpecific="true" language="C#v3.5" #>
<#@ output extension=".html" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="ObjectRelational_v1_0.ttinclude" #>
<#   
#>
<#+ 
	public string CurrentXmlFile;
	
	ObjectRelationalAbstraction CurrAbs;
	EntitiesType CurrEntities;
	EntityType CurrEntity;
	GeneratorOutputType CurrGeneratorOutput;
	
	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<Tuple<string, string>> result = new List<Tuple<string, string>>();
		foreach(string xmlFileName in xmlFileNames)
		{
			ObjectRelationalAbstraction abs = LoadXml<ObjectRelationalAbstraction>(xmlFileName);
			CurrAbs = abs;
			foreach(EntitiesType entities in abs.Entities)
			{
				CurrEntities = entities;
				foreach(GeneratorOutputType outputType in entities.GeneratorMeta)
				{
					if(outputType.role != GeneratorOutputTypeRole.MVCViews)
						continue;
					CurrGeneratorOutput = outputType;
					foreach(EntityType entity in entities.Entity.Where(ent => ent.ViewGeneration != null))
					{
						if(entity.ViewGeneration == null)
							continue;
						CurrEntity = entity;
						foreach(EditorViewType editorView in entity.ViewGeneration)
						{
							GenerationEnvironment.Clear();
							GenerateEditView(editorView);
							string content = GenerationEnvironment.ToString();
							string fileName = Path.Combine("Views", entity.name, "Edit" + editorView.forType + ".cshtml");
							Tuple<string, string> generation = 
								Tuple.Create(fileName, content);
							result.Add(generation);
						}
					}
				}
			}
		}
		return result.ToArray();
	}
	
	#region Class Level Variable Block
	
	//CQRS_v1_0.DomainType CurrentDomain;
	
	#endregion
	
	string GetTypeWithParentName(string typeName)
	{
		return CurrEntity.name + typeName;
	}
	
	string GetDataClassName(string typeName)
	{
		return "Edit" + typeName + "Data";
	}
	
	string GetContentFieldName(string typeName, bool isCollection)
	{
		if(isCollection)
			return typeName + "List";
		return typeName + "Item";
	}
	
	string GetContentTypeName(string typeName, bool isCollection)
	{
		if(isCollection)
			return "List<" + typeName + ">";
		return typeName;
	}
	
	void GenerateEditView(EditorViewType editorView)
	{
		string typeName = editorView.forType;
		string typeWithParentName = GetTypeWithParentName(editorView.forType);
		string namespaceName = CurrGeneratorOutput.namespaceName;
		string dataClassName = GetDataClassName(typeWithParentName);
		string rootEntityName = CurrEntity.name;
		string displayName = editorView.displayName;
		bool isCollection = editorView.isCollection;
		string contentTypeName = GetContentTypeName(typeName, isCollection);
		string contentFieldName = GetContentFieldName(typeName, isCollection);
#>
@model <#= namespaceName #>.<#= dataClassName #>

@{
    ViewBag.Title = "Edit <#= displayName #>";
}

<h2>Edit <#= displayName #></h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <legend><#= displayName #></legend>
        @Html.HiddenFor(model => model.<#= rootEntityName #>Id)
        @Html.HiddenFor(model => model.returnViewName)
        <h2><#= displayName #></h2>
        <p>
		<#+ if(isCollection) { #>
        @for(int i = 0; i < Model.<#= contentFieldName  #>.Count; i++) 
        {
            <div>
            @Html.EditorFor(x => x.<#= contentFieldName  #>[i], "<#= typeName #>")
            </div>
        }
		<#+ } else { #>
		@Html.EditorFor(x => x.<#= contentFieldName #>, "<#= typeName #>")
		<#+ } #>
            <input type="submit" name="button" value="Add Measurement" />
        </p>


        <p>
            <input type="submit" name="button" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<#+
	}
#>