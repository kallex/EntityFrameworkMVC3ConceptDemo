<#@ template debug="true" hostSpecific="true" language="C#v3.5" #>
<#@ output extension=".html" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="ObjectRelational_v1_0.ttinclude" #>
<#   
#>
<#+ 
	public string CurrentXmlFile;
	
	ObjectRelationalAbstraction CurrAbs;
	EntitiesType CurrEntities;
	EntityType CurrEntity;
	GeneratorOutputType CurrGeneratorOutput;
	
	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<Tuple<string, string>> result = new List<Tuple<string, string>>();
		foreach(string xmlFileName in xmlFileNames)
		{
			ObjectRelationalAbstraction abs = LoadXml<ObjectRelationalAbstraction>(xmlFileName);
			CurrAbs = abs;
			foreach(EntitiesType entities in abs.Entities)
			{
				CurrEntities = entities;
				foreach(GeneratorOutputType outputType in entities.GeneratorMeta)
				{
					if(outputType.role != GeneratorOutputTypeRole.MVCControllerClasses)
						continue;
					
					GenerationEnvironment.Clear();
					CurrGeneratorOutput = outputType;
					GenerateUsings(entities.DomainName);
					foreach(EntityType entity in entities.Entity)
					{
						CurrEntity = entity;
						GenerateRootController(entity);
						if(entity.ViewGeneration != null)
							GenerateEditController(entity);
					}
					
					string content = GenerationEnvironment.ToString();
					string fileName = Path.Combine("Controllers", entities.DomainName + "Controllers.designer.cs");
					Tuple<string, string> generation = 
						Tuple.Create(fileName, content);
					result.Add(generation);
				}
			}
		}
		return result.ToArray();
	}
	
	#region Class Level Variable Block
	
	//CQRS_v1_0.DomainType CurrentDomain;
	
	#endregion
	
	void GenerateUsings(string domainName)
	{
		#>
using System;
using System.Collections.Generic;
using System.Web.Mvc;
using BL = <#= domainName #>.BusinessLogic;
using MAP = <#= domainName #>.MVCModel.MappingToBL;

		<#+
	}
	
	string GetControllerClassName(string entityName)
	{
		return entityName + "Controller";
	}

	void GenerateRootController(EntityType entity)
	{
		string entityName = entity.name;
		string controllerClassName = GetControllerClassName(entityName);
		#>
namespace <#= CurrGeneratorOutput.namespaceName #>
{
	public partial class <#= controllerClassName #>
	{
	}
}		
		<#+
	}
	
	void GenerateEditController(EntityType entity)
	{
		string controllerClassName = GetControllerClassName(entity.name);
		string domainName = CurrEntities.DomainName;
		#>
namespace <#= CurrGeneratorOutput.namespaceName #>
{
	<#+ GenerateEditDataClasses(entity); #>
	partial class <#= controllerClassName #>
	{
		<#+ GenerateEditHandlers(entity); #>
	}
}
		
		<#+
	}

	void GenerateEditHandlers(EntityType entity)
	{
		foreach(EditorViewType editorView in entity.ViewGeneration)
		{
			GenerateEditHandler(editorView);
		}
	}
	
	void GenerateEditHandler(EditorViewType editorView)
	{
		string typeName = editorView.forType;
		string dataClassName = GetDataClassName(typeName);
		bool isCollection = editorView.isCollection;
		string contentTypeName = GetContentTypeName(typeName, isCollection);
		string contentFieldName = GetContentFieldName(typeName, isCollection);
		string entityName = CurrEntity.name;
		string editViewName = "Edit" + typeName;
		string idFieldName = entityName + "Id";
		#>
        public ActionResult <#= editViewName #>(Guid id, string returnUrl)
        {
            <#= entityName #> entity = Get<#= entityName #>(id);
            return View("<#= editViewName #>", new <#= dataClassName #> {
                                                         <#= idFieldName #> = id, <#= contentFieldName #> = entity.<#= editorView.pathFromRoot #>, returnViewName = returnUrl
                                                     });
        }

        [HttpPost]
        public ActionResult <#= editViewName #>(<#= dataClassName #> model, string button, <#= contentTypeName #> <#= contentFieldName #>, string returnViewName)
        {
            // TODO: Version concurrency check
			<#+ if(isCollection) { #>
            if(button.StartsWith("Add"))
            {
                model.<#= contentFieldName #>.Add(new <#= typeName #>());
                return View(model);
            }
			<#+ } #>
            Guid <#= idFieldName #> = model.<#= idFieldName #>;
            <#= entityName #> entity = Get<#= entityName #>(<#= idFieldName #>);
            entity.<#= editorView.pathFromRoot #> = <#= contentFieldName #>;
            BL.<#= entityName #> bl<#= entityName #> = MAP.Map<#= entityName #>.MapMvcToBusiness(entity);
            MAP.MapSupport.ActiveCtx.SaveChanges();
            entity = Get<#= entityName #>(<#= idFieldName #>);
            return View(returnViewName, entity);
        }
		<#+
	}
	
	void GenerateEditDataClasses(EntityType entity)
	{
		foreach(EditorViewType editorView in entity.ViewGeneration)
		{
			GenerateEditDataClass(editorView);
		}
	}
	
	void GenerateEditDataClass(EditorViewType editorView)
	{
		string typeName = editorView.forType;
		string dataClassName = GetDataClassName(typeName);
		bool isCollection = editorView.isCollection;
		string contentTypeName = GetContentTypeName(typeName, isCollection);
		string contentFieldName = GetContentFieldName(typeName, isCollection);
		#>
		public class <#= dataClassName #>
		{
			public Guid <#= CurrEntity.name #>Id { get; set; }
	        public <#= contentTypeName #> <#= contentFieldName #> { get; set; }
	        public string returnViewName { get; set; }
		}
		<#+
	}
	
	string GetTypeWithParentName(string typeName)
	{
		return CurrEntity.name + typeName;
	}
	
	string GetDataClassName(string typeName)
	{
		return "Edit" + typeName + "Data";
	}
	
	string GetContentFieldName(string typeName, bool isCollection)
	{
		if(isCollection)
			return typeName + "List";
		return typeName + "Item";
	}
	
	string GetContentTypeName(string typeName, bool isCollection)
	{
		if(isCollection)
			return "List<" + typeName + ">";
		return typeName;
	}
	
#>